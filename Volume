using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

[RequireComponent(typeof(AudioSource))]

public class Alert : MonoBehaviour
{
    private Coroutine _pushController;
    private Coroutine _decreaseController;
    private AudioSource _audioSource;
    private float _target;
    private float _maxData = 1f;
    
    private void OnTriggerEnter(Collider other)
    {
        if (other.TryGetComponent<Player>(out Player player))
        {
            PushController();
            _audioSource.Play();
        }
    }

    private void OnTriggerExit(Collider other)
    {
        if (other.TryGetComponent<Player>(out Player player))
        {
            DecreaseController();
        }
    }

    private IEnumerator PushVolum()
    {
        var waitForSecond = new WaitForSeconds(0.01f);
        _target = 1f;
        if (_audioSource.volume != _target)
        {
            while (_audioSource.volume != _target)
            {
                _audioSource.volume = Mathf.MoveTowards(_audioSource.volume, _target, _maxData * Time.deltaTime);
                yield return waitForSecond;
            }
        }
    }

    private void PushController()
    {
        if (_pushController != null)
        {
            StopCoroutine(PushVolum());
        }
        else
        {
            _pushController = StartCoroutine(PushVolum());
        }
    }

    private void DecreaseController()
    {
        if (_decreaseController != null)
        {
            StopCoroutine(DecreaseVolume());
        }
        else
        {
            _decreaseController = StartCoroutine(DecreaseVolume());
        }
    }

    private IEnumerator DecreaseVolume()
    {
        var waitForSecond = new WaitForSeconds(0.01f);
        _target = 0f;
        if (_audioSource.volume != _target)
        {
            while (_audioSource.volume != _target)
            {
                _audioSource.volume = Mathf.MoveTowards(_audioSource.volume, _target, _maxData * Time.deltaTime);
                yield return waitForSecond;
            }
        }
    }

    private void Awake()
    {
        _audioSource = GetComponent<AudioSource>();
    }
}
